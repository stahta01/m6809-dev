From 9dfaacc638c4413b7cf1779043f20e5020123bff Mon Sep 17 00:00:00 2001
From: Tim S <stahta01@users.sourceforge.net>
Date: Thu, 15 Nov 2018 21:29:12 -0500
Subject: gcc6809: Add binutils scripts from gcc6809

---
 binutils/ar         | 231 +++++++++++++++++++++++++++++
 binutils/as         | 224 ++++++++++++++++++++++++++++
 binutils/ld         | 352 ++++++++++++++++++++++++++++++++++++++++++++
 create mode 100644 binutils/ar
 create mode 100644 binutils/as
 create mode 100644 binutils/ld

diff --git a/binutils/ar b/binutils/ar
new file mode 100644
index 0000000..ff7e48e
--- /dev/null
+++ b/binutils/ar
@@ -0,0 +1,231 @@
+#!/bin/sh
+#
+# Copyright 2006 by Brian Dominy <brian@oddchange.com>
+#
+# Changes by David Flamand <dflamand@gmail.com> (June 2016)
+#  - cleanup, more robust and verbose in case of error
+#
+# This file is part of GCC6809.
+#
+# GCC6809 is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# GCC6809 is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with GCC6809; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+
+# This script is a frontend to the aslib library manager, to make it
+# look more like GNU ar.  Not all ar features are supported here.
+# It basically translates ar style options into aslib format.
+
+set -e
+IFS=' '
+
+as_prefix=@AS_PREFIX@
+bindir=${as_prefix}/bin
+
+showversion () {
+cat <<END
+ar (avr) [GNU archiver frontend] 0.3 20160608
+This program is free software; you may redistribute it under the terms of
+the GNU General Public License.  This program has absolutely no warranty.
+END
+}
+
+# Output a message to stderr and exit with a failure code.
+error ()
+{
+	echo "ar (avr): $1" >&2
+	if [ -z "$2" ]; then
+		exit 1
+	fi
+}
+
+# Strip directory from path.
+basename()
+{
+	printf "%s" "${1##*/}"
+}
+
+# Strip filename from path.
+dirname()
+{
+	name=${1##*/}
+	name=${1%$name}
+	printf "%s" "${name:-.}"
+}
+
+# Install or uninstall library cache.
+libcachetool ()
+{
+	install=$1; shift
+
+	if [ $# = 0 ]; then
+		error "no file given"
+	fi
+	if [ $# -gt 1 ]; then
+		shift
+		error "extra garbage '$*'"
+	fi
+
+	libpathname=$1
+	if [ "$install" = 1 -a ! -f "$libpathname" ]; then
+		error "no such file '$libpathname'"
+	fi
+
+	libfile=`basename "$libpathname"`
+	libdir=`dirname "$libpathname"`
+	lib=${libfile%.*}
+	tmplibfile=$libfile.tmp
+	libcache=${lib}-cache
+	tmplibcache=$libcache.tmp
+
+	if [ ! -d "$libdir" ]; then
+		error "no such directory '$libdir'"
+	fi
+	cd "$libdir"
+
+	# Check if library file exist
+	if [ ! -f "$libfile" ]; then
+		error "'$libfile' does not exist in '$libdir'"
+	fi
+
+	if [ "$install" = 1 ]; then
+		### '--cache' option ###
+
+		# Check for cache directory
+		if [ -d "$libcache" ]; then
+			error "directory '$libcache' already exist"
+		fi
+
+		# Recreate the cache directory
+		rm -rf "$tmplibcache"
+		mkdir -p "$tmplibcache"
+
+		# Fill the cache
+		cd "$tmplibcache"
+		if ! $bindir/aslib x "../$libfile"; then
+			cd ..
+			rm -rf "$tmplibcache"
+			exit 1
+		fi
+		cd ..
+
+		# Overwrite cache with temp cache
+		rm -rf "$libcache"
+		mv "$tmplibcache" "$libcache"
+
+		# Make the index file
+		find "$libcache" -name '*.o' | LC_ALL=C sort >"$libfile"
+	else
+		### '--uncache' option ###
+
+		# Check for cache directory
+		if [ ! -d "$libcache" ]; then
+			error "directory '$libcache' does not exist"
+		fi
+
+		# Separator set to newline
+		IFS='
+'
+		# Generate a list of object file
+		objects=`cat $libfile`
+
+		# Remove temp file
+		rm -f "$tmplibfile"
+
+		# Rename old library file
+		mv "$libfile" "$tmplibfile"
+
+		# Build a new library from object file
+		cd "$libcache"
+		if ! $bindir/aslib qc "../$libfile" $objects; then
+			cd ..
+			rm -rf "$libfile"
+			mv "$tmplibfile" "$libfile"
+			exit 1
+		fi
+		cd ..
+
+		# Removing cache directory and library file
+		rm -rf "$libcache" "$tmplibfile"
+	fi
+
+	exit
+}
+
+# Reorder and remove duplicate option letter.
+options=${1#-}
+prefix=${1%$options}
+if [ "$options" = "${options#-}" ]; then
+	error=; c=; d=; p=; q=; r=; t=; u=; v=; x=
+	while [ -n "$options" ]; do
+		remain=${options#?}
+		letter=${options%$remain}
+		case $letter in
+			c) c=c;; d) d=d;; p) p=p;;
+			q) q=q;; r) r=r;; t) t=t;;
+			u) u=u;; v) v=v;; x) x=x;;
+			*) error=X; error "invalid option -- '$letter'" X;;
+		esac
+		options=$remain
+	done
+	if [ -n "$error" ]; then
+		exit 1
+	fi
+	options=$c$d$p$q$r$t$u$v$x
+fi
+
+# Make sure we have an option.
+if [ -z "$options" ]; then
+	error "no options given"
+fi
+
+# Parse and translate command-line options.
+shift
+case $options in
+############################################################
+# these are custom archiver options (no GNU ar equivalent) #
+	-cache)
+		libcachetool 1 "$@"
+		;;
+	-uncache)
+		libcachetool 0 "$@"
+		;;
+############################################################
+	-version)
+		showversion
+		exit 0
+		;;
+	-help)
+		cat $0 # TODO
+		exit 0
+		;;
+	cru)
+		options="cr"
+		;;
+	cruv)
+		options="crv"
+		;;
+	cr|crv|d|dv|p|pv|q|qv|r|rv|t|tv|vx|x)
+		;;
+	*)
+		error "invalid options '$prefix$options'"
+		;;
+esac
+
+# Make sure we have an archive.
+if [ -z "$1" ]; then
+	error "no archive given"
+fi
+
+# Invoke the real assembler with translated options.
+exec $bindir/aslib $options "$@"
diff --git a/binutils/as b/binutils/as
new file mode 100644
index 0000000..f249309
--- /dev/null
+++ b/binutils/as
@@ -0,0 +1,224 @@
+#!/bin/sh
+#
+# Copyright 2006 by Brian Dominy <brian@oddchange.com>
+#
+# Changes by David Flamand <dflamand@gmail.com> (June 2016)
+#  - more robust and verbose in case of error
+#
+# This file is part of GCC6809.
+#
+# GCC6809 is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# GCC6809 is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with GCC6809; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+
+# This script is a frontend to the asavr assembler, to make it
+# look more like GNU as.  Not all as features are supported here.
+# It basically translates as style options into asavr format.
+
+set -e
+IFS=' '
+
+as_prefix=@AS_PREFIX@
+bindir=${as_prefix}/bin
+
+showversion () {
+cat <<END
+as (avr) [GNU assembler frontend] 0.3 20160608
+This program is free software; you may redistribute it under the terms of
+the GNU General Public License.  This program has absolutely no warranty.
+END
+}
+
+# Output a message to stderr and exit with a failure code.
+error ()
+{
+	echo "as (avr): $1" >&2
+	exit 1
+}
+
+# Assume nothing.
+input_file=
+list_file=
+gen_list_file=
+verbose=
+version=
+
+# Default output filename.
+output_file=a.out
+
+# The -o option causes an object file to be created.
+# The -g option causes undefined symbols to be made global.
+options=-og
+
+# Parse the command-line options.  See the GNU 'as' man page for
+# an explanation of all these options.  Our goal is to translate
+# them into asavr form.
+while [ $# -gt 0 ]; do
+	arg=$1; shift
+	case $arg in
+############################################################
+# these are custom assember options (no GNU as equivalent) #
+		-m6809)
+			true
+			;;
+		-gn)
+			# Generate NoICE debug symbols
+			options="${options}j"
+			;;
+		-gs)
+			# Generate SDCC debug symbols
+			options="${options}y"
+			;;
+############################################################
+		--globalize-symbols)
+			# Make all symbols global
+			options="${options}a"
+			;;
+		-m*)
+			error "invalid CPU option '$arg'"
+			;;
+		--)
+			error "standard input not supported"
+			;;
+		-a*)
+			options="${options}lc"
+			gen_list_file=X
+			;;
+		-I)
+			if [ $# -lt 1 ]; then
+				error "missing path after '$arg'"
+			fi
+#			include_file=$1
+#			echo "warning: include path '$include_file' ignored"
+			shift
+			;;
+		-I*)
+#			include_file=${arg#-I}
+#			echo "warning: include path '$include_file' ignored"
+			;;
+		-MD)
+			error "assembler option '$arg' not supported"
+			;;
+		-o)
+			output_file=$1; shift
+			;;
+		-v|-verbose|--verbose)
+			verbose=X
+			;;
+		-version|--version)
+			version=X
+			;;
+		-help|--help)
+			cat $0 # TODO
+			exit 0
+			;;
+		-D|-f|-K|--traditional-format|-w|-x|-Z|-W|--no-warn)
+			# These options are accepted but ignored by GNU as.
+			true
+			;;
+		=*)
+			# Set the name of the listing file
+			list_file=${arg#=}
+			;;
+		-*)
+			error "unrecognized option '$arg'"
+			;;
+		*)
+			if [ -n "$input_file" ]; then
+				error "more than one input file specified"
+			fi
+			if [ "${arg%.*}" = "$arg" ]; then
+				error "input file '$arg' without extension"
+			fi
+			input_file=$arg
+			;;
+	esac
+done
+
+# Setup various file name.
+asoutput_file=${input_file%\.*}.rel
+if [ -n "$gen_list_file" ]; then
+	aslist_file=${input_file%\.*}.lst
+	if [ -z "$list_file" ]; then
+		list_file=$aslist_file
+	fi
+fi
+
+# Output version information.
+if [ -n "$version" -o -n "$verbose" ]; then
+	showversion
+fi
+if [ -n "$version" ]; then
+	exit 0
+fi
+
+# Output more information when --verbose option is set.
+if [ -n "$verbose" ]; then
+	echo "$bindir/asavr $options $input_file"
+	echo "Output file: '$output_file'"
+	if [ -n "$gen_list_file" ]; then
+		echo "List file: '$list_file'"
+	fi
+fi
+
+# Exit if no input files given.
+# We don't support redirecting from standard input.
+if [ -z "$input_file" ]; then
+	if [ -n "$verbose" ]; then
+		exit 0
+	fi
+	error "no input file specified"
+fi
+
+set +e
+
+# Invoke the real assembler with translated options.
+$bindir/asavr $options "$input_file"
+rc=$?
+
+set -e
+
+# OK, see if the assembler succeeded or not.
+# If it failed, the source is copied to /tmp/asavr_error.s
+# so that it can be inspected.  GCC will normally delete any
+# temporary .s files that it generates.  This makes debugging
+# the compiler easier.
+#
+# Also, asavr still creates a .o file even on an error;
+# that can confuse 'make'.  So delete the output file.
+if [ "$rc" != "0" ]; then
+	# Make sure that the input file is valid before copying.
+	if [ -f "$input_file" ]; then
+		cp -p "$input_file" /tmp/asavr_error.s || true
+	fi
+	rm -f "$asoutput_file"
+	if [ -n "$gen_list_file" ]; then
+		rm -f "$aslist_file"
+	fi
+	exit $rc
+fi
+
+# asavr creates the output file with the same name as the
+# input file, but with a .rel extension.  The user may want
+# a different filename altogether, so honor that request here.
+if [ "$asoutput_file" != "$output_file" ]; then
+	mv "$asoutput_file" "$output_file"
+fi
+
+# Same as above but for the list file with a .lst extension.
+if [ -n "$gen_list_file" -a "$aslist_file" != "$list_file" ]; then
+	mv "$aslist_file" "$list_file"
+fi
+
+exit 0
diff --git a/binutils/ld b/binutils/ld
new file mode 100644
index 0000000..0be37e1
--- /dev/null
+++ b/binutils/ld
@@ -0,0 +1,352 @@
+#!/bin/sh
+#
+# Copyright 2006, 2007 by Brian Dominy <brian@oddchange.com>
+#
+# Changes by David Flamand <dflamand@gmail.com> (June 2016)
+#  - added more options, more robust and verbose in case of error
+#
+# This file is part of GCC6809.
+#
+# GCC6809 is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# GCC6809 is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with GCC6809; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+
+# This script is a frontend to the aslink object linker, to make it
+# look more like GNU ld.  Not all ld features are supported here.
+# It basically translates ld style options into aslink format.
+
+set -e
+IFS=' '
+
+as_prefix=@AS_PREFIX@
+bindir=${as_prefix}/bin
+
+showversion () {
+cat <<END
+ld (avr) [GNU linker frontend] 0.3 20160608
+This program is free software; you may redistribute it under the terms of
+the GNU General Public License.  This program has absolutely no warranty.
+END
+}
+
+# Output an error message to stderr and exit with a failure code.
+error ()
+{
+	echo "ld (avr): $1" >&2
+	exit 1
+}
+
+# Check if a given filename will survive a variable expansion.
+checkfilename ()
+{
+	MSG=$1; shift
+	OIFS=$IFS; IFS=/
+	A=$1; shift; B=$*
+	IFS=$OIFS
+	if [ -z "$A" -o "$A" != "$B" ]; then
+		error "$MSG '$A'"
+	fi
+}
+
+# Set output format.
+setformat ()
+{
+	case $1 in
+		s19)	# Motorola S Record 
+			aslink_options="${aslink_options}o"
+			exe_suffix=$1
+			;;
+		bin)	# Tandy CoCo Disk BASIC binary
+			aslink_options="${aslink_options}t"
+			exe_suffix=$1
+			;;
+		ihx)	# Intel Hex
+			aslink_options="${aslink_options}i"
+			exe_suffix=$1
+			;;
+		*)
+			error "unrecognized output format '$1'"
+			;;
+	esac
+}
+
+# Assume nothing.
+args=
+asmap_file=
+asoutput_file=
+crt0_file=
+exe_suffix=
+gen_map_file=
+input_files=
+libpaths=
+libs=
+map_file=
+noargs=
+options=
+target=
+verbose=
+version=
+
+# Set defaults.
+aslink_options=-nwxsar
+output_file=a.out
+
+# Try to guest the target type, which is determined
+# by the name by which the program was invoked.
+case ${0##*/} in
+	coco-*|*-coco-*|*-coco)
+		options="-b .text=0x2000 -b .data=0x7000 -b .bss=0x7C00 -b .ctors=0x7F00 -b .dtors=0x7F80 -b .vector=0x7FF0"
+		target=coco
+		setformat bin
+		LD_NOARGS=X
+		;;
+	sim-*|*-sim-*|*-sim)
+		options="-b .text=0x10 -b .vector=0xFFF0"
+		target=sim
+		setformat s19
+		LD_NOARGS=X
+		;;
+	*)
+		options="-b .vector=0xFFF0"
+		target=unknown
+		setformat s19
+		LD_NOARGS=X # default to noargs for now
+		;;
+esac
+
+# Parse and translate command-line options.
+while [ $# -gt 0 ]; do
+	arg=$1; shift
+	case $arg in
+##########################################################
+# these are custom linker options (no GNU ld equivalent) #
+		-gn)
+			# Generate NoICE debug file
+			aslink_options="${aslink_options}j"
+			;;
+		-gs)
+			# Generate SDCDB debug file
+			aslink_options="${aslink_options}y"
+			;;
+		--map)
+			# Generate map file
+			gen_map_file=X
+			;;
+		--args)
+			# Prototype of main():
+			#  if supplied main() prototype is
+			#    int main(int argc, char **argc)
+			#  if not supplied main() prototype is
+			#    int main(void)
+			args=X
+			;;
+		--noargs)
+			# The inverse of the above
+			noargs=X
+			;;
+		-Tcode)
+			# Same as -Ttext
+			options="$options -b .text=$1"; shift
+			;;
+##########################################################
+		-o|--output)
+			output_file=$1; shift
+			;;
+		--output=*)
+			output_file=${arg#*=}
+			;;
+		-L|--library-path)
+			path=$1; shift
+			checkfilename "invalid library path" "$path" $path
+			libpaths="$libpaths -k $path"
+			;;
+		-L*)
+			path=${arg#-L}
+			checkfilename "invalid library path" "$path" $path
+			libpaths="$libpaths -k $path"
+			;;
+		--library-path=*)
+			path=${arg#*=}
+			checkfilename "invalid library name" "$path" $path
+			libpaths="$libpaths -k $path"
+			;;
+		-l|--library)
+			name=$1; shift
+			checkfilename "invalid library name" "$name" $name
+			libs="$libs -l lib$name.a"
+			;;
+		-l*)
+			name=${arg#-l}
+			checkfilename "invalid library name" "$name" $name
+			libs="$libs -l lib$name.a"
+			;;
+		--library=*)
+			name=${arg#*=}
+			checkfilename "invalid library name" "$name" $name
+			libs="$libs -l lib$name.a"
+			;;
+		--section-start)
+			options="$options -b $1"; shift
+			;;
+		--section-start=*)
+			options="$options -b ${arg#*=}"
+			;;
+		--defsym)
+			options="$options -g $1"; shift
+			;;
+		--defsym=*)
+			options="$options -g ${arg#*=}"
+			;;
+		--oformat)
+			setformat "$1"; shift
+			;;
+		--oformat=*)
+			setformat "${arg#*=}"
+			;;
+		-Tbss)
+			options="$options -b .bss=$1"; shift
+			;;
+		-Tdata)
+			options="$options -b .data=$1"; shift
+			;;
+		-Ttext)
+			options="$options -b .text=$1"; shift
+			;;
+		-g)
+			# Ignored by GNU ld; we should do the same
+			true
+			;;
+		-v|-verbose|--verbose)
+			verbose=X
+			;;
+		-version|--version)
+			version=X
+			;;
+		-help|--help)
+			cat $0 # TODO
+			exit 0
+			;;
+		-T)
+			options="$options -f $1"; shift
+			;;
+		-Map|--Map)
+			map_file=$1; shift
+			gen_map_file=X
+			;;
+		-Map=*|--Map=*)
+			map_file=${arg#*=}
+			gen_map_file=X
+			;;
+		-*)
+			error "unrecognized option '$arg'"
+			;;
+		*/crt0.o|crt0.o)
+			checkfilename "invalid input file name" "$arg" $arg
+			if [ -n "$crt0_file" ]; then
+				error "more than one crt0.o given"
+			fi
+			crt0_file=$arg
+			;;
+		*)
+			checkfilename "invalid input file name" "$arg" $arg
+			if [ "${arg%.*}" = "$arg" ]; then
+				error "input file '$arg' without extension"
+			fi
+			input_files="$input_files $arg"
+			;;
+	esac
+done
+
+# Setup various file name.
+asoutput_file=${output_file%\.*}.$exe_suffix
+asmap_file=${asoutput_file%\.*}.map
+if [ -z "$map_file" ]; then
+	map_file=${output_file%\.*}.map
+fi
+if [ -n "$gen_map_file" ]; then
+	aslink_options="${aslink_options}m"
+fi
+
+# Handle --noargs and --args option.
+if [ -n "$args" ]; then
+	noargs=
+elif [ -z "$noargs" ]; then
+	noargs=$LD_NOARGS # from target or from environment variable
+fi
+# $noargs non-empty, so define __argc and __argv to NULL.
+if [ -n "$noargs" ]; then
+	options="$options -g __argc=0 -g __argv=0"
+fi
+
+# Output version information.
+if [ -n "$version" -o -n "$verbose" ]; then
+	showversion
+fi
+if [ -n "$version" ]; then
+	exit 0
+fi
+
+# Output more information when --verbose option is set.
+if [ -n "$verbose" ]; then
+	echo "$bindir/aslink $aslink_options $options $asoutput_file $crt0_file $input_files $libpaths $libs"
+	echo "Target: '$target'"
+	echo "Output format: '$exe_suffix'"
+	echo "Output file: '$output_file'"
+	if [ -n "$gen_map_file" ]; then
+		echo "Map file: '$map_file'"
+	fi
+fi
+
+# Exit if no input files given.
+if [ -z "$input_files" ]; then
+	if [ -n "$verbose" ]; then
+		exit 0
+	fi
+	error "no input files"
+fi
+
+if [ -n "$gen_map_file" -a -e "$asmap_file" ]; then
+	rm -f "$asmap_file"
+fi
+
+set +e
+
+# Invoke the real linker with translated options.
+$bindir/aslink $aslink_options $options "$asoutput_file" $crt0_file $input_files $libpaths $libs
+rc=$?
+
+set -e
+
+# Do some cleanup in case of error.
+if [ "$rc" != "0" ]; then
+	rm -f "$asoutput_file"
+	if [ -n "$gen_map_file" -a -e "$asmap_file" ]; then
+		rm -f "$asmap_file"
+	fi
+	exit $rc
+fi
+
+# aslink creates the output file with the same name as the
+# input file, but with a .s19|.bin|.ihx extension.  The user may want
+# a different filename altogether, so honor that request here.
+if [ "$asoutput_file" != "$output_file" ]; then
+	mv "$asoutput_file" "$output_file"
+fi
+
+# Same as above but for the map file with a .map extension.
+if [ -n "$gen_map_file" -a "$asmap_file" != "$map_file" ]; then
+	mv "$asmap_file" "$map_file"
+fi
+
+exit 0
-- 
2.19.1.windows.1

