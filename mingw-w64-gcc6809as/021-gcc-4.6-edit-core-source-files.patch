From f981f041b968e9d6412460dbb627e81362c79f65 Mon Sep 17 00:00:00 2001
From: Tim S <tim.stahlhut@gmail.com>
Date: Tue, 5 Feb 2019 18:33:41 -0500
Subject: core: modified source files

This patch is based on the work of
Brian Dominy https://github.com/bcd/gcc and
selected changes from LWTools gcc6809lw-4.6.4-9.patch
---
 gcc/calls.c           |  2 +-
 gcc/libgcc2.c         | 10 ++++++----
 gcc/longlong.h        |  5 +++++

diff --git a/gcc/calls.c b/gcc/calls.c
index 4ad6c3fb0fc..f3af562407a 100644
--- a/gcc/calls.c
+++ b/gcc/calls.c
@@ -2561,7 +2561,7 @@ expand_call (tree exp, rtx target, int ignore)
 	 call sequence.
 	 Also do the adjustments before a throwing call, otherwise
 	 exception handling can fail; PR 19225. */
-      if (pending_stack_adjust >= 32
+      if (pending_stack_adjust >= 8
 	  || (pending_stack_adjust > 0
 	      && (flags & ECF_MAY_BE_ALLOCA))
 	  || (pending_stack_adjust > 0
diff --git a/gcc/libgcc2.c b/gcc/libgcc2.c
index 78d53f02aee..b5b8c84fd23 100644
--- a/gcc/libgcc2.c
+++ b/gcc/libgcc2.c
@@ -485,6 +485,7 @@ __ashrdi3 (DWtype u, shift_count_type b)
 #endif
 
 #ifdef L_bswapsi2
+#if MIN_UNITS_PER_WORD > 1
 SItype
 __bswapsi2 (SItype u)
 {
@@ -494,7 +495,9 @@ __bswapsi2 (SItype u)
 	  | (((u) & 0x000000ff) << 24));
 }
 #endif
+#endif
 #ifdef L_bswapdi2
+#if LONG_LONG_TYPE_SIZE > 32
 DItype
 __bswapdi2 (DItype u)
 {
@@ -508,6 +511,7 @@ __bswapdi2 (DItype u)
 	  | (((u) & 0x00000000000000ffull) << 56));
 }
 #endif
+#endif
 #ifdef L_ffssi2
 #undef int
 int
@@ -1280,7 +1284,7 @@ __fixdfdi (DFtype a)
 UDWtype
 __fixunssfDI (SFtype a)
 {
-#if LIBGCC2_HAS_DF_MODE
+#if LIBGCC2_HAS_DF_MODE || (FLT_MANT_DIG >= W_TYPE_SIZE)
   /* Convert the SFtype to a DFtype, because that is surely not going
      to lose any bits.  Some day someone else can write a faster version
      that avoids converting to DFtype, and verify it really works right.  */
@@ -1298,7 +1302,7 @@ __fixunssfDI (SFtype a)
 
   /* Assemble result from the two parts.  */
   return ((UDWtype) hi << W_TYPE_SIZE) | lo;
-#elif FLT_MANT_DIG < W_TYPE_SIZE
+#else
   if (a < 1)
     return 0;
   if (a < Wtype_MAXp1_F)
@@ -1334,8 +1338,6 @@ __fixunssfDI (SFtype a)
       return (DWtype)counter << shift;
     }
   return -1;
-#else
-# error
 #endif
 }
 #endif
diff --git a/gcc/longlong.h b/gcc/longlong.h
index acb31851cba..20dd0ef13a8 100644
--- a/gcc/longlong.h
+++ b/gcc/longlong.h
@@ -528,6 +528,11 @@ UDItype __umulsidi3 (USItype, USItype);
 	   : "cbit")
 #endif /* __M32R__ */
 
+#if defined (__m6309__) || defined (__m6809__)
+#define count_leading_zeros(COUNT,X)	((COUNT) = __builtin_clz (X))
+#define count_trailing_zeros(COUNT,X)	((COUNT) = __builtin_ctz (X))
+#endif
+
 #if defined (__mc68000__) && W_TYPE_SIZE == 32
 #define add_ssaaaa(sh, sl, ah, al, bh, bl) \
   __asm__ ("add%.l %5,%1\n\taddx%.l %3,%0"				\
-- 
2.19.1.windows.1

