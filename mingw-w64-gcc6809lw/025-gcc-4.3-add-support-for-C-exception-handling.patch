From 63e9c8edd4c0e29851bb65a0f5635d1bdf056745 Mon Sep 17 00:00:00 2001
From: dfffffff <dflamand@gmail.com>
Date: Sat, 28 May 2016 00:11:43 -0400
Subject: core: add support for C++ exception handling

This patch is based on the work of
David Flamand https://gitlab.com/dfffffff/gcc6809
---
 gcc/except.c         |  4 ++++
 gcc/unwind-generic.h |  4 ++++
 gcc/unwind-pe.h      | 10 ++++++++++
 3 files changed, 18 insertions(+)

diff --git a/gcc/except.c b/gcc/except.c
index 129d830c5..b751807c9 100644
--- a/gcc/except.c
+++ b/gcc/except.c
@@ -3742,6 +3742,7 @@ output_function_exception_table (const char * ARG_UNUSED (fnname))
 		       * tt_format_size));
 
       disp = after_disp;
+#if BIGGEST_ALIGNMENT/BITS_PER_UNIT > 1
       do
 	{
 	  unsigned int disp_size, pad;
@@ -3756,6 +3757,7 @@ output_function_exception_table (const char * ARG_UNUSED (fnname))
 	  disp = after_disp + pad;
 	}
       while (disp != last_disp);
+#endif
 
       dw2_asm_output_data_uleb128 (disp, "@TType base offset");
 #endif
@@ -3797,8 +3799,10 @@ output_function_exception_table (const char * ARG_UNUSED (fnname))
     dw2_asm_output_data (1, VARRAY_UCHAR (cfun->eh->action_record_data, i),
 			 (i ? NULL : "Action record table"));
 
+#if BIGGEST_ALIGNMENT/BITS_PER_UNIT > 1
   if (have_tt_data)
     assemble_align (tt_format_size * BITS_PER_UNIT);
+#endif
 
   i = VEC_length (tree, cfun->eh->ttype_data);
   while (i-- > 0)
diff --git a/gcc/unwind-generic.h b/gcc/unwind-generic.h
index 5e0f608d8..2ac91a692 100644
--- a/gcc/unwind-generic.h
+++ b/gcc/unwind-generic.h
@@ -56,7 +56,11 @@ typedef unsigned _Unwind_Internal_Ptr __attribute__((__mode__(__pointer__)));
    consumer of an exception.  We'll go along with this for now even on
    32-bit machines.  We'll need to provide some other option for
    16-bit machines and for machines with > 8 bits per byte.  */
+#ifdef __UINT64_TYPE__
 typedef unsigned _Unwind_Exception_Class __attribute__((__mode__(__DI__)));
+#else
+typedef char _Unwind_Exception_Class[8];
+#endif
 
 /* The unwind interface uses reason codes in several contexts to
    identify the reasons for failures or other actions.  */
diff --git a/gcc/unwind-pe.h b/gcc/unwind-pe.h
index 6924e8c17..316d63e5a 100644
--- a/gcc/unwind-pe.h
+++ b/gcc/unwind-pe.h
@@ -87,8 +87,10 @@ size_of_encoded_value (unsigned char encoding)
       return 2;
     case DW_EH_PE_udata4:
       return 4;
+#ifdef __UINT64_TYPE__
     case DW_EH_PE_udata8:
       return 8;
+#endif
     }
   __gxx_abort ();
 }
@@ -191,10 +193,14 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,
       void *ptr;
       unsigned u2 __attribute__ ((mode (HI)));
       unsigned u4 __attribute__ ((mode (SI)));
+#ifdef __UINT64_TYPE__
       unsigned u8 __attribute__ ((mode (DI)));
+#endif
       signed s2 __attribute__ ((mode (HI)));
       signed s4 __attribute__ ((mode (SI)));
+#ifdef __INT64_TYPE__
       signed s8 __attribute__ ((mode (DI)));
+#endif
     } __attribute__((__packed__));
 
   const union unaligned *u = (const union unaligned *) p;
@@ -240,10 +246,12 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,
 	  result = u->u4;
 	  p += 4;
 	  break;
+#ifdef __UINT64_TYPE__
 	case DW_EH_PE_udata8:
 	  result = u->u8;
 	  p += 8;
 	  break;
+#endif
 
 	case DW_EH_PE_sdata2:
 	  result = u->s2;
@@ -253,10 +261,12 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,
 	  result = u->s4;
 	  p += 4;
 	  break;
+#ifdef __INT64_TYPE__
 	case DW_EH_PE_sdata8:
 	  result = u->s8;
 	  p += 8;
 	  break;
+#endif
 
 	default:
 	  __gxx_abort ();
-- 
